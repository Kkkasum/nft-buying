#include "imports/stdlib.fc";
#include "op-codes.fc";
#include "errors.fc";
#include "nft-utils.fc";

const int const::max_rarity_purchase_supply = 1000;

global slice storage::owner_address;
global int   storage::next_item_index;
global cell  storage::content;
global cell  storage::nft_item_code;
global cell  storage::royalty_params;
global int   storage::purchase_fee;
global slice storage::fee_address;
global int   storage::common;
global int   storage::uncommon;
global int   storage::rare;
global int   storage::mythical;
global int   storage::legendary;
global int   storage::immortal;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::owner_address      = ds~load_msg_addr();
    storage::next_item_index    = ds~load_uint(64);
    storage::content            = ds~load_ref();
    storage::nft_item_code      = ds~load_ref();
    storage::royalty_params     = ds~load_ref();
    storage::purchase_fee       = ds~load_coins();
    storage::fee_address        = ds~load_msg_addr();
    storage::common             = ds~load_coins();
    storage::uncommon           = ds~load_coins();
    storage::rare               = ds~load_coins();
    storage::mythical           = ds~load_coins();
    storage::legendary          = ds~load_coins();
    storage::immortal           = ds~load_coins();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::owner_address)
            .store_uint(storage::next_item_index, 64)
            .store_ref(storage::content)
            .store_ref(storage::nft_item_code)
            .store_ref(storage::royalty_params)
            .store_coins(storage::purchase_fee)
            .store_slice(storage::fee_address)
            .store_coins(storage::common)
            .store_coins(storage::uncommon)
            .store_coins(storage::rare)
            .store_coins(storage::mythical)
            .store_coins(storage::legendary)
            .store_coins(storage::immortal)
        .end_cell()
    );
}

(int, slice) get_rarity_storage_count(int rarity) inline {
    if (rarity == 0) {
        return (storage::common, "common.json");
    }
    if (rarity == 1) {
        return (storage::uncommon, "uncommon.json");
    }
    if (rarity == 2) {
        return (storage::rare, "rare.json");
    }
    if (rarity == 3) {
        return (storage::mythical, "mythical.json");
    }
    if (rarity == 4) {
        return (storage::legendary, "legendary.json");
    }
    if (rarity == 5) {
        return (storage::immortal, "immortal.json");
    }
    return (-1, "");
}

() increase_rarity_storage_count(int rarity) impure inline {
    if (rarity == 0) {
        storage::common += 1;
        return ();
    }
    if (rarity == 1) {
        storage::uncommon += 1;
        return ();
    }
    if (rarity == 2) {
        storage::rare += 1;
        return ();
    }
    if (rarity == 3) {
        storage::mythical += 1;
        return ();
    }
    if (rarity == 4) {
        storage::legendary += 1;
        return ();
    }
    if (rarity == 5) {
        storage::immortal += 1;
        return ();
    }
}

int storage_fees() asm "STORAGEFEES";

() send_fees(int amount) impure inline {
    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(storage::fee_address)
        .store_coins(0)
        .store_uint(op::fee_payout, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_uint(0, 64)
    .end_cell();
    send_raw_message(msg, SEND_MODE_CARRY_ALL_BALANCE);
}

() deploy_nft_item(int item_index, slice owner_address, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, my_address(), nft_item_code);
    slice nft_address = calculate_nft_item_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(nft_content);
    send_raw_message(msg.end_cell(), SEND_MODE_PAY_FEES_SEPARATELY);
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    cell msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params, 32)
        .store_uint(query_id, 64)
        .store_slice(data)
    .end_cell();
    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::purchase) {
        int item_index = in_msg_body~load_uint(64);
        int rarity = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        throw_unless(error::invalid_item_index, item_index <= storage::next_item_index);
        throw_if(error::not_enough_ton, msg_value < storage::purchase_fee);

        (int rarity_count, slice content) = get_rarity_storage_count(rarity);
        throw_if(error::unknown_rarity, rarity_count == -1);
        throw_if(error::rarity_purchase_limit, rarity_count > const::max_rarity_purchase_supply);

        cell nft_content = begin_cell()
            .store_slice(from_address)
            .store_ref(begin_cell().store_slice(content).end_cell())
            .store_slice(from_address)
        .end_cell();
        deploy_nft_item(item_index, sender_address, storage::nft_item_code, in_msg_body~load_coins(), nft_content);

        var is_last = item_index == storage::next_item_index;
        if (is_last) {
            storage::next_item_index += 1;
        }

        increase_rarity_storage_count(rarity);

        raw_reserve(storage_fees(), 4 + SEND_MODE_BOUNCE_ON_ACTION_FAIL);
        send_fees(msg_value);

        save_data();
        return ();
    }

    if (op == op::get_royalty_params) {
        send_royalty_params(sender_address, query_id, storage::royalty_params.begin_parse());
        return ();
    }

    throw_unless(error::unauthorized_owner_request, equal_slices_bits(sender_address, storage::owner_address));

    if (op == op::mint) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        
        throw_unless(error::invalid_item_index, item_index <= storage::next_item_index);

        var is_last = item_index == storage::next_item_index;
        deploy_nft_item(item_index, storage::owner_address, storage::nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());
        if (is_last) {
            storage::next_item_index += 1;
            save_data();
        }
        return ();
    }

    if (op == op::batch_mint) { ;; batch deploy of new nfts
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if (f?) {
                counter += 1;
                if (counter >= 250) { ;; Limit due to limits of action list size
                    throw(error::batch_mint_limit);
                }

                throw_unless(error::invalid_item_index, item_index <= storage::next_item_index);

                deploy_nft_item(item_index, storage::owner_address, storage::nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());
                if (item_index == storage::next_item_index) {
                    storage::next_item_index += 1;
                }
            }
        } until ( ~ f?);
        save_data();
        return ();
    }

    if (op == op::change_owner) { ;; change owner
        storage::owner_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::change_content) { ;; change content
        storage::content = in_msg_body~load_ref();
        storage::royalty_params = in_msg_body~load_ref();
        save_data();
        return ();
    }

    if (op == op::change_fee) {
        storage::purchase_fee = in_msg_body~load_coins();
        storage::fee_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::upgrade) {
        cell new_data = in_msg_body~load_ref();
        cell new_code = in_msg_body~load_ref();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff);
}

(int, cell, slice) get_collection_data() method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    return (storage::next_item_index, cs~load_ref(), storage::owner_address);
}

(cell, cell) get_content() method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    return (cs~load_ref(), cs~load_ref());
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index, my_address(), storage::nft_item_code);
    return calculate_nft_item_address(state_init);
}

(int, int, slice) royalty_params() method_id {
    load_data();
    slice rs = storage::royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (
        begin_cell()
            .store_uint(1, 8)
            .store_slice(common_content)
            .store_ref(individual_nft_content)
        .end_cell()
    );
}

(int, slice) get_fees() method_id {
    load_data();
    return (storage::purchase_fee, storage::fee_address);
}

(int, slice) get_rarity_count(int rarity) method_id {
    load_data();
    return get_rarity_storage_count(rarity);
}